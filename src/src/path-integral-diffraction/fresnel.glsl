#define PI 3.1415926535
#define HALF_PI (3.1415926535 * 0.5)

vec4 allpoly (float x) {
  vec4 s1, s2;

  return s1;
}
float polyF (float x) {
  float s1, s2;
  if (x == 0.0) return 2.999999999999634;
  float ax = x < 0.0 ? -x : x;
  if (ax <= 1.0) {
    s1 = 3.763297112699879e-20 + (
      x * (1.3428327623306275e-16 + (
        x * (1.7201074326816183e-13 + (
          x * (1.0230451416490724e-10 + (
            x * (3.055689837902576e-8 + (
              x * (0.0000046361374928786735 + (
                x * (0.000345017939782574 + (
                  x * (0.011522095507358577 + (
                    x * (0.1434079197807589 + (
                      x * (0.4215435550436775))))))))))))))))));
    s2 = 1.2544323709001127e-20 + (
      x * (4.5200143407412973e-17 + (
        x * (5.887545336215784e-14 + (
          x * (3.6014002958937136e-11 + (
            x * (1.1269922476399903e-8 + (
              x * (0.0000018462756734893055 + (
                x * (0.00015593440916415301 + (
                  x * (0.0064405152650885865 + (
                    x * (0.11688892585919138 + (
                      x * (0.7515863983533789 + (
                        x * (1.0)
                      )))))))))))))))))));
  } else {
    x = 1.0 / x;
    s1 = 0.0 + (
      x * (0.4215435550436775 + (
        x * (0.1434079197807589 + (
          x * (0.011522095507358577 + (
            x * (0.000345017939782574 + (
              x * (0.0000046361374928786735 + (
                x * (3.055689837902576e-8 + (
                  x * (1.0230451416490724e-10 + (
                    x * (1.7201074326816183e-13 + (
                      x * (1.3428327623306275e-16 + (
                        x * 3.763297112699879e-20
                      )))))))))))))))))));
    s2 = 1.0 + (
      x * (0.7515863983533789 + (
        x * (0.11688892585919138 + (
          x * (0.0064405152650885865 + (
            x * (0.00015593440916415301 + (
              x * (0.0000018462756734893055 + (
                x * (1.1269922476399903e-8 + (
                  x * (3.6014002958937136e-11 + (
                    x * (5.887545336215784e-14 + (
                      x * (4.5200143407412973e-17 + (
                        x * 1.2544323709001127e-20
                      )))))))))))))))))));
  }
  return s1 / s2;
}

float polyC (float x) {
  float s1, s2;
  if (x == 0.0) return 1.0;
  float ax = x < 0.0 ? -x : x;
  if (ax <= 1.0) {
    s1 = 1.0 + (x * (-0.20552590095501388 + (x * (0.018884331939670384 + (x * (-0.0006451914356839651 + (x * (0.000009504280628298596 + (x * (-4.9884311457357354e-8))))))))));
    s2 = 1.0 + (x * (0.04121420907221998 + (x * (0.0008680295429417843 + (x * (0.000012226278902417902 + (x * (1.2500186247959882e-7 + (x * (9.154392157746574e-10 + (x * 3.99982968972496e-12)))))))))));
  } else {
    x = 1.0 / x;
    s1 = 0.0 + (x * (-4.9884311457357354e-8 + (x * (0.000009504280628298596 + (x * (-0.0006451914356839651 + (x * (0.018884331939670384 + (x * (-0.20552590095501388 + x))))))))));
    s2 = 3.99982968972496e-12 + (x * (9.154392157746574e-10 + (x * (1.2500186247959882e-7 + (x * (0.000012226278902417902 + (x * (0.0008680295429417843 + (x * (0.04121420907221998 + x))))))))));
  }
  return s1 / s2;
}

float polyG (float x) {
  float s1, s2;
  if (x == 0.0) return 1.0;
  float ax = x < 0.0 ? -x : x;
  if (ax <= 1.0) {
    s1 = 1.8695871016278324e-22 + (x * (8.363544356306774e-19 + (x * (1.375554606332618e-15 + (x * (1.0826804113902088e-12 + (x * (4.4534441586175015e-10 + (x * (9.828524436884223e-8 + (x * (0.000011513882611188428 + (x * (0.0006840793809153931 + (x * (0.018764858409257526 + (x * (0.1971028335255234 + (x * (0.5044420736433832))))))))))))))))))));
    s2 = 1.8695871016278324e-22 + (x * (8.391588162831187e-19 + (x * (1.3879653125957886e-15 + (x * (1.1027321506624028e-12 + (x * (4.6068072814652043e-10 + (x * (1.0431458965757199e-7 + (x * (0.000012754507566772912 + (x * (0.0008146791071843061 + (x * (0.02536037414203388 + (x * (0.33774898912002 + (x * (1.4749575992512833 + x))))))))))))))))))));
  } else {
    x = 1.0 / x;
    s1 = 0.0 + (x * (0.5044420736433832 + (x * (0.1971028335255234 + (x * (0.018764858409257526 + (x * (0.0006840793809153931 + (x * (0.000011513882611188428 + (x * (9.828524436884223e-8 + (x * (4.4534441586175015e-10 + (x * (1.0826804113902088e-12 + (x * (1.375554606332618e-15 + (x * (8.363544356306774e-19 + (x * 1.8695871016278324e-22)))))))))))))))))))));
    s2 = 1.0 + (x * (1.4749575992512833 + (x * (0.33774898912002 + (x * (0.02536037414203388 + (x * (0.0008146791071843061 + (x * (0.000012754507566772912 + (x * (1.0431458965757199e-7 + (x * (4.6068072814652043e-10 + (x * (1.1027321506624028e-12 + (x * (1.3879653125957886e-15 + (x * (8.391588162831187e-19 + (x * 1.8695871016278324e-22)))))))))))))))))))));
  }
  return s1 / s2;
}

float polyS (float x) {
  float s1, s2;
  if (x == 0.0) return 0.5235987755982989;
  float ax = x < 0.0 ? -x : x;
  if (ax <= 1.0) {
    s1 = 318016297876.5678 + (x * (-44297951805.96978 + (x * (2548908805.7337637 + (x * (-62974148.62058625 + (x * (708840.0452577386 + (x * (-2991.8191940101983 + x))))))))));
    s2 = 607366389490.0846 + (x * (22441179564.534092 + (x * (419320245.8981112 + (x * (5173438.887700964 + (x * (45584.78108065326 + (x * (281.3762688899943 + x))))))))));
  } else {
    x = 1.0 / x;
    s1 = 0.0 + (x * (-2991.8191940101983 + (x * (708840.0452577386 + (x * (-62974148.62058625 + (x * (2548908805.7337637 + (x * (-44297951805.96978 + (x * 318016297876.5678)))))))))));
    s2 = 1.0 + (x * (281.3762688899943 + (x * (45584.78108065326 + (x * (5173438.887700964 + (x * (419320245.8981112 + (x * (22441179564.534092 + (x * 607366389490.0846)))))))))));
  }
  return s1 / s2;
}

vec2 fresnel(float x) {
  float x2, a, f, g, t, u;
  vec2 result = vec2(0.5);

  float xa = abs( x );
  x2 = xa * xa;
  if (x2 < 2.5625) {
    t = x2 * x2;
    result = xa * vec2(x2 * polyS(t), polyC(t));
  } else if (xa <= 36974.0) {
    x2 = xa * xa;
    t = PI * x2;
    u = 1.0 / (t * t);
    t = 1.0 / t;
    f = 1.0 - u * polyF(u);
    g = t * polyG(u);
    t = HALF_PI * x2;
    float st = sin(t);
    float ct = cos(t);
    t = PI * xa;
    result = 0.5 - (ct * vec2(f, g) + st * vec2(g, -f)) / t;
  }
  return x < 0.0 ? -result : result;
}

#pragma glslify: export(fresnel)
